name: Checks
on:
  push:
    branches:
      - main
      - develop
      - v1
      - v3
  pull_request:
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  Prepare:
    runs-on: [sdk-self-hosted-linux-amd64-build-system]
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build
        uses: ./.github/actions/build

  Lint-and-format:
    if: github.event.pull_request.labels.*.name != 'skip-lint'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Get Changed Files (Compare with Main)
        id: get_changed_files
        run: |
          git fetch origin main --depth=1
          # TODO ideally lint the non-generated files in src/bindings/
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.ref }} | grep -E '\.(ts|js)$' | grep -v 'src/bindings/*' || true)

          if [ -n "$CHANGED_FILES" ]; then
            echo "Files changed:"
            echo "$CHANGED_FILES"
            echo "$CHANGED_FILES" > changed_files.txt
            echo "files_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant files changed."
            echo "files_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Prettier Check
        if: steps.get_changed_files.outputs.files_changed == 'true'
        run: xargs npm run format:check < changed_files.txt

      - name: Run Oxlint
        if: steps.get_changed_files.outputs.files_changed == 'true'
        run: xargs npm run lint:strict < changed_files.txt


  # The upload job is seperate from the build job because
  # other workflows have to wait for the cache
  # so the split is nesecary to avoid waiting for the artifact upload too
  Upload-bindings:
    name: upload bindings artifact
    needs: Prepare
    runs-on: [sdk-self-hosted-linux-amd64-build-system]
    steps:
      - name: Set up Nix
        run: echo "PATH=$PATH:/nix/var/nix/profiles/default/bin" >> $GITHUB_ENV
      - name: Disable smudging
        run: echo "GIT_LFS_SKIP_SMUDGE=1" >> $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: generate tar
        run: |
          set -Eeu
          ./pin.sh
          nix build o1js#bindings-tar --out-link bindings.tar.gz
      - name: Upload bindings
        uses: actions/upload-artifact@v4
        with:
          name: bindings.tar.gz
          path: bindings.tar.gz

  Build-And-Test-Server:
    needs: Prepare
    timeout-minutes: 210
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_type:
          [
            'Simple integration tests',
            'Reducer integration tests',
            'DEX integration tests',
            'DEX integration test with proofs',
            'Voting integration tests',
            'Verification Key Regression Check 1',
            'Verification Key Regression Check 2',
            'CommonJS test',
          ]
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Build-And-Test-Server"
        uses: ./.github/actions/test-server

  Run-Unit-Tests:
    needs: Prepare
    name: Run unit tests parallel
    timeout-minutes: 210
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        chunk: [1, 2, 3, 4, 5, 6, 7, 8]
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: unit-tests
        uses: ./.github/actions/unit-test

  Build-And-Test-Server-Unit-Tests:
    name: Build-And-Test-Server (Unit tests)
    needs: [Run-Unit-Tests]
    runs-on: ubuntu-latest
    steps:
      - run: echo "All unit tests completed successfully"

  Build-And-Test-Web:
    needs: Prepare
    timeout-minutes: 90
    runs-on: ubuntu-latest
    steps:
      - name: Restore repository
        uses: actions/cache@v4
        with:
          path: .
          key: repo-${{ github.sha }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.OS }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npm run e2e:install

      - name: Build o1js and prepare the web server
        run: |
          npm run build:web
          npm run e2e:prepare-server

      - name: Execute E2E tests
        run: npm run test:e2e

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: always()
        with:
          if-no-files-found: ignore
          name: e2e-tests-report
          path: tests/report/
          retention-days: 30

  Live-test-master:
    needs: Prepare
    timeout-minutes: 45
    runs-on: ubuntu-latest
    services:
      mina-local-network:
        image: o1labs/mina-local-network:master-latest-lightnet
        env:
          NETWORK_TYPE: 'single-node'
          PROOF_LEVEL: 'none'
        ports:
          - 3085:3085
          - 5432:5432
          - 8080:8080
          - 8181:8181
          - 8282:8282
        volumes:
          - /tmp:/root/logs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: build
        uses: ./.github/actions/build
      - name: Use shared steps for live testing jobs
        uses: ./.github/actions/live-tests-shared
        with:
          mina-branch-name: master

  Live-test-compatible:
    needs: Prepare
    timeout-minutes: 45
    runs-on: ubuntu-latest
    services:
      mina-local-network:
        image: o1labs/mina-local-network:compatible-latest-lightnet
        env:
          NETWORK_TYPE: 'single-node'
          PROOF_LEVEL: 'none'
        ports:
          - 3085:3085
          - 5432:5432
          - 8080:8080
          - 8181:8181
          - 8282:8282
        volumes:
          - /tmp:/root/logs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: build
        uses: ./.github/actions/build
      - name: Use shared steps for live testing jobs
        uses: ./.github/actions/live-tests-shared
        with:
          mina-branch-name: compatible
